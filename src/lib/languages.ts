export interface Language {
  code: string;
  name: string;
  nativeName: string;
  flag: string;
  rtl: boolean;
}

export const languages: Language[] = [
  {
    code: 'en',
    name: 'English',
    nativeName: 'English',
    flag: 'ðŸ‡ºðŸ‡¸',
    rtl: false
  },
  {
    code: 'ja',
    name: 'Japanese',
    nativeName: 'æ—¥æœ¬èªž',
    flag: 'ðŸ‡¯ðŸ‡µ',
    rtl: false
  },
  {
    code: 'zh',
    name: 'Chinese',
    nativeName: 'ä¸­æ–‡',
    flag: 'ðŸ‡¨ðŸ‡³',
    rtl: false
  },
  {
    code: 'ko',
    name: 'Korean',
    nativeName: 'í•œêµ­ì–´',
    flag: 'ðŸ‡°ðŸ‡·',
    rtl: false
  },
  {
    code: 'es',
    name: 'Spanish',
    nativeName: 'EspaÃ±ol',
    flag: 'ðŸ‡ªðŸ‡¸',
    rtl: false
  },
  {
    code: 'fr',
    name: 'French',
    nativeName: 'FranÃ§ais',
    flag: 'ðŸ‡«ðŸ‡·',
    rtl: false
  },
  {
    code: 'de',
    name: 'German',
    nativeName: 'Deutsch',
    flag: 'ðŸ‡©ðŸ‡ª',
    rtl: false
  }
];

export const defaultLanguage = languages[0];

// Language detection using browser's language
export const detectBrowserLanguage = (): Language => {
  const browserLang = navigator.language.split('-')[0];
  return languages.find(lang => lang.code === browserLang) || defaultLanguage;
};

// Store language preference in localStorage
export const setLanguagePreference = (language: Language) => {
  localStorage.setItem('preferredLanguage', JSON.stringify(language));
};

export const getLanguagePreference = (): Language => {
  const saved = localStorage.getItem('preferredLanguage');
  if (saved) {
    try {
      return JSON.parse(saved);
    } catch {
      return defaultLanguage;
    }
  }
  return defaultLanguage;
}; 